目标
    类型、值、变量
    表达式、运算符
    语句
    补充：可选的分号

1、类型、值、变量
   类型：由计算机内存存储的基本构造绝对。
        计算机设备存储内容需要容量，容量如何计算？？
        byte = kb = mb = 1024gb = 1tb
        byte(字节) : 1 个基本存储单位存储的内容 是二进制数字
        在编程过程中，敲的每个字母，每段代码，要想运行，一定要先
分配内存。因为  
    代码保存在硬盘的文件内-[运行]->读入内存-[加载]->CPU解析
-[输出]->结果(控制台、网页、iPhone模拟器、真机)  
     10
     "hello"   不同的值，可能需要的内存多少不一，提前规定，各个值
需要分配的内存--按需分配的原则，更好的利用内存

   var number = 100;  //定义，分配内存 8 个字节
   …..
   number.release;    //使用完毕，手动释放
  

   两大类：原始类型、对象类型

   原始类型：数字、字符串、布尔值、null(空)、undefined(未定义)

   数字：js 不区分整数值和浮点数值，所有数字都用 浮点数表示。
64位系统中，最大表示 +-1.7976931348623157*10(308) 
          最小 +-5*10(-324)  。
     统称 数字量 number
     整数直接量:
        10进制数字   0   3  10000
        16进制数字   0xff   //15*16+15  =255（十进制）
        8 进制数字   0377   //3*64+7*8+7 =255（十进制）
     浮点数直接量    3.14      2342.455   .33333  6.02e23  //6.02*10(23)

   计算 16 进制数字，转换为 10 进制数字
     0-9 a(10) b c d e f(15)
   0x123      1*16(2)+2*16(1)+3*16(0)=281


   字符串：带单引号或双引号的  "字符"
      转义字符
      \0           NUL 字符
      \b           退格符
      \t           tab  键
      \n           换行
      \r           回车
      \"           双引号
      \\            \

      //全世界所有的书面文字，都可以作为字符串的内容
      console.log("hello\t上海");
      console.log("hello\n北京");
      console.log("hello\"广州\"");
      console.log("hello\'重庆\'");
      console.log("hello\\海口\\");


   布尔值：表示 两种状态，真/假   开/关  对/错  保留字 true  false
   
   null 和 undefined:都表示“空值” “未定义” 建议多使用 null 
     都表示什么都没有，
     情人节送女朋友礼物：
     有一个盒子，但是里面没有东西-----null
     如果连盒子都没有，更不用说里面的内容-------------undefined

    var a ;
    var b =10;
    console.log(a+b);  -> null+10



   类型转换：如数字转字符、字符转数字
    10+"object"  //=>"10 object" 数字转字符串
    "7"+"4"      //=>74   字符串转数字再计算
    var n = 1 - "x"  //=>NaN   "x"无法转为数字
    (1)如果有字符串，所有的自动先转换为字符串，结果是两个字符串合并为一个字符串
    (2)如果两个都是数字，全部转换为小数，再进行计算
    (3)如果无法转换，报错
        

    变量声明： var 标示符名称
       变量作用区域{}

  

2、表达式、运算符
   赋值运算符:  =  (把右边的值，赋给左边的变量名)
      var a1;
      a1 = 100;
      10 = 100;   //左边不是变量


   算术运算符：+  -  *  /(除，取商)   %(取模、求余)  
      [/ % 结果只取整数]
   var n1 = 10;
   var n2 = 3;
   console.log(n1 + n2)
   console.log(n1 / n2)
   console.log(n1 % n2)
   判断整除、判断奇数偶数
   
	
   
   复杂运算，通过函数实现
   Math.pow(2,53)     //=>9007199254740992    2的53次幂
   Math.round(0.6)    //=>1.0   四舍五入
   Math.ceil(.6)      //=>1.0   向上取整
   Math.floor(.6)     //=>0.0   向下取整
   Math.abs(-5)       //=>5     求绝对值
   Math.max(x,y,z)    //三个数最大值
   Math.min(x,y,z)    //三个数最小值
   Math.random()      //生成0---1 之间随机数
   Math.PI            //圆周率

   生成一个随机的 三位整数
   1、生成一个 0-1 之间的随机数，小数
      Math.random()
   2、让小数点右移三位 *1000
      Math.random() *1000
   3、去掉小数点
      Math.round(Math.random() *100) 
   4、打印输出结果
      console.log(Math.round(Math.random() *100)); 

   NaN(不是数字)     
   Infinity(无穷大)
   
   0 /0     //NaN  0 不能当被除数
   
   + ： 数字 + 数字    (+表示求和)
        数字 + "字符"  (+表示连接成字符串)
        +数字         (+表示正数)
   - :  数字 - 数字    (- 表示求差)
        -数字         (- 表示负数)

   ++    --      typeof    void(返回undefined值)
   i++  ++i   i+++(错误)
   ++  -- 只能用于数字类型的计算，放在数字前或后
   ++i
   i++

   //示例 1
   var i = 10;
   /*执行前i=?*/   i++;   /*执行后i=? */      
   consloe.log(i);  //最终结果
   
   x+++y
   A x+(++y)
   B (x++)+y  对
   贪心法则：从左往右执行代码，x+不会立即执行，会再看看
还有没有+，还有 x++ 合法，还贪心再往后看+，x+++不合法
不做，按照 (x++)
   ++x+++y
   ((++x)++)+y   错误[++ --只能接具体值，不能是变量]

----------------------------------
   日期和时间
   var   then = new Date(2014,0,1)  //2014年1月1日
   var   later = new Date(2014,0,1,17,10,30) //设置了时分秒
   var   now = new Date()   //当前时间
   var   between = now - then   //计算时间间隔的毫秒数
   
   //通过一定的方法，取出对象中的某些零件，组成部分
   later.getFullYear()   //=>2014
   later.getMonth()      //=>0     月份从 0 开始计算
   later.getDate()       //=>1     一月中的第几天
   later.getDay()        //=>5     星期一   0 代表星期日   5 代表星期一
   later.getHours()      //=>17:5pm

   console.log(later.getfullyear());  //区分大小写的
   TypeError: later.getfullyear is not a function

   later   => Date {Wed Jan 01 2014 17:10:30 GMT+0800 (CST)}
     {}   对象，内部存放一个对象所有的内容
     Date 对象的名字
     var d1 = Date {Wed Jan 01 2014 17:10:30 GMT+0800 (CST)};
     var d2 = Date {Wed Jan 01 2014 17:10:30 GMT+0800 (CST)};
     var d3 = Date {Wed Jan 02 2014 17:10:30 GMT+0800 (CST)};


     一台完整的电脑，用对象来进行描述，可以通过对象，取出某个零件、让他完成功能
     var c1 = 电脑{CPU:Intel3000;内存:8G;显示器:30寸;键盘:蓝牙;鼠标:无线;}
     var c2 = 电脑{CPU:Intel3000;内存:8G;显示器:30寸;键盘:蓝牙;鼠标:无线;}
     var c3 = 电脑{CPU:Intel3000;内存:16G;显示器:30寸;键盘:蓝牙;鼠标:无线;}

----------------------------------
   比较运算符
   >   <   >=   <=    ==  ===(恒等) !=(不等于)  
   var a =10;
   var b = 100;
   console.log(a>b);  //=>false
   数字==数字
   对象===对象

----------------------------------
   逻辑运算符(把多个布尔值进行比较)
   &&(与，同时满足才为真)   ||(或，两边任意为真，结果为真)   
   !(非，求相反)

    布尔&&布尔      布尔||布尔   !布尔

    true&&false = false
    false&&false = false
    true&&true   = true
    
    true || true = true
    true || false = true
    false || true = true
    false || false = false

    !true  = false
    !false = true

   闰年的判断条件有两个
   (1)能被4整除，不能被100整除(必须两个同时满足)
   (2)能被400整除
      两个条件只要满足一个就可以
   var year = 2014;
   year % 4 == 0  (余数为0表示整除)
   year % 100 != 0

   year % 400 ==0     


  ((year % 4 == 0) && (year % 100 != 0))||year % 400 ==0
  = true  false


3、语句
   条件:假定一个条件，得到一个结果，true false 。可以
通过固定格式的语句，描述这样的话。
   判断闰年：
    如果某年份能被4整除 而且 同时不能被100整除，或者满足
能被400整除 
     得出结果，是闰年
   否则
     得出结果，不是闰年
   if(false){
      //满足条件执行
   }else
   {
      //不满足条件时执行
   }


   if(表达式)
		
var year = 2012;
if(((year % 4 == 0)&&(year % 100 != 0))
     ||year % 400 ==0){
    console.log("2012年闰年");
}else{
    console.log("2012年不是闰年");
}

   循环:当满足同一个条件的时候，重复做同样的事情。
     公司发工资{
      上班
     }
     
     当 xxx 时，条件一定要说清楚,何时开始、何时结束、计数
     当我们写代码，要求从0行开始，写完 10000 行结束，每一行计数一次
     for(循环开始值 ; 循环结束值 ; 循环增长){
        //要重复做的事情
        console.log();
     }

     1+2+3+4+5+6…100 。找规律，后一个数，是前一个数+1
     var sum = 0;  //存放和的箱子
     sum  = 0+ 1;  //把第一个数字放入箱子 sum =1
     sum  = 1+ 2;  //把第二个数字与箱子中的第一个数字相加，和放入sum=3
     sum  = 3+ 3;  //sum = 6
 
     sum = sum + i ; //i 自动增长,从 0 -99
     //在 = 左右两边都出现了，程序员偷懒的写法
     sum += i;

     sum = sum - i;
     sum -= i;     *=  /=  %=

     border-top:solid 1px ;
     border-left:solid 1px ;
     border-button:solid 1px ;
     border-right:solid 1px ;

     boder:solid 1px ;
      
     color:#FFAA44
     color:#FA4

   


     var number = 1;  //定义第一个数
     var sum = 0;     //定义存放结果的和
     for(var i=0 ; i<100 ; i++){
        //sum = sum+i;   //用 sum 存放之前所有数字相加的和
        //缩写
	sum += i;
     } 
     console.log(sum+100);
      


   跳转



4、补充：可选的分号
   (1)代码各占一行，可以不用 ;
      a =3;
      b = 4;
     第一行可以不用 ;
      
      a = 3;b=4;
     这里前面不能省略 ;
   (2)不是在所有换行出都补充 ; ，而是再缺少 ; 无法正确解析代码的时候补充
      var a
      a 
      = 
      3
      console.log(a)
     会自动解析为
     var a;   a=3;  console.log(a);

    下面就错误
    var  y  = x +f
    (a +b).toString()
    解析为
    var y = x+f(a+b).toString();
 
   (3)上下两行语义无法合并，自动在第一句后补 ;
     return
     true;
     解析为
     return;
     true;
   (4) ++  --  要注意
    x
    ++
    y
    解析为  x;  ++y
    不是   x++;  y;
   

练习一：    分别利用for 循环打印 9*9  表?\t  输出 空格
\n  输出 换行1*1=11*2=2  2*2=41*3=3  2*3=6  3*3=91*4=4  2*4=8  3*4=12  4*4=161*5=5  2*5=10  3*5=15  4*5=20  5*5=251*6=6  2*6=12  3*6=18  4*6=24  5*6=30  6*6=361*7=7  2*7=14  3*7=21  4*7=28  5*7=35  6*7=42  7*7=491*8=8  2*8=16  3*8=24  4*8=32  5*8=40  6*8=48  7*8=56  8*8=641*9=9  2*9=18  3*9=27  4*9=36  5*9=45  6*9=54  7*9=63  8*9=72  9*9=81    练习二：   定义一个年份，计算此年份是否为闰年?


练习三：		  

 求500以内的完备数？
（提示：完备数就是所有约数和等于本身的数 6 = 1 + 2 + 3）


练习四：
   利用程序输出如下图形:
   *
   ***
   *****
   *******
   *****
   ***
   *   


*******
*******
*******
*******
*******
*******
*******



-------------------------------
for (int i = 1; i < 10; i++) {
			for (int j = 1; j <= i; j++) {
				System.out.print(i + "*" + j + "=" + i * j + "\t");
				if (i == j)

					System.out.println();
			}
		}


----------------------------
		int sum = 500;
		int count;
		for (int i = 1; i <= sum; i++) {

			count = 0;

			for (int j = 1; j < i; j++) {
				if (i % j == 0) {  //是否是该数的因数
					count += j;
				}
				
				if (count >i) {//如果以大于因数,则跳出该次循环

					continue;
				}

			}
			
			if (count == i) {  //判断因数相加是否为本身   是则打印

				System.out.println(i+"\t\t");
			}
			
			
			

		}
   


